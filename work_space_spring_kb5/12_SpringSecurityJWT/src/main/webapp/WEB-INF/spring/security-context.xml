<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- #4. 암호화인코딩 빈등록 : BCryptPaaswordEncoder -->
    <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- #5. 권한체크 설정 -->
    <!-- 정적파일은 권한 검사 제외 -->
    <http security="none" pattern="/resources/**"/>
    <http security="none" pattern="/swagger-ui.html"/>
    <http auto-config="true">
        <intercept-url pattern="/" access="permitAll()"/>
        <!-- rest login page -->
        <intercept-url pattern="/member/login" method="POST" access="permitAll()"/>
        <intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
        <!-- cat get 요청만 풀어주기 -->
<!--        <intercept-url pattern="/rest/cat**" method="GET" access="permitAll()"/>-->
        <intercept-url pattern="/rest/**" access="hasAnyRole({'ADMIN', 'USER'})" />

        <!--
            login-page : 로그인폼페이지요청
            login-processing-url : 로그인폼 제출페이지. 핸들러작성할 필요 없음.
            username-parameter / password-parameter :
                제출폼에서 id/pw에 해당하는 name값이 username/password가 아닌 경우
        -->
        <form-login
                authentication-failure-url="/error/accessDenied.do"
                login-page="/error/accessDenied.do"
                login-processing-url="/error/accessDenied.do"
                username-parameter="id"
                password-parameter="password"
        />

        <logout
                logout-url="/member/memberLogout.do"
                invalidate-session="true"
                logout-success-url="/"/>

        <!--
            remember-me : session-timeout시간이상으로 사용자 정보를 관리
            token-validity-seconds : remember-me 토큰 유효시간 60 * 60 * 24 * 14 (초단위)
        -->
        <remember-me
                data-source-ref="dataSource"
                token-validity-seconds="1209600"/>


        <!-- 권한 없는 페이지 접근시 처리 -->
        <access-denied-handler error-page="/error/accessDenied.do"/>

        <!-- 커스텀 필터 등록 -->
        <!-- https://oingdaddy.tistory.com/74 -->
        <custom-filter ref="jwtAuthenticationFilter" before="BASIC_AUTH_FILTER"/>

        <!-- rest 적용시 csrf disabled 필수! -->
        <csrf disabled="true"/>
    </http>

    <!-- #6. 인증/권한 검사 manager빈 설정 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="securityService">
            <password-encoder ref="bcryptPasswordEncoder"/>
        </authentication-provider>
    </authentication-manager>

    <!-- #7. UserDetails구현체 빈등록 -->
    <context:component-scan base-package="com.multi.mvc"/>


</beans:beans>
