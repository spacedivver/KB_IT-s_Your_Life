<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:c="http://www.springframework.org/schema/c"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Java 코드로 만들때
		Cat cat1 = new Cat("코코", 4);
		Dog dog1 = new Dog("똘이", 2);
	-->

	<!-- 1. Bean으로 생성하는 방법 - 생성자를 활용하는 방법 -->
	<bean name="cat1" class="com.multi.mvc.model.vo.Cat">
<!--		<constructor-arg name="name" value="도라에몽" />-->
<!--		<constructor-arg name="age" value="12" />-->
		<constructor-arg index="0" value="도라에몽" />
		<constructor-arg index="1" value="12" />
	</bean>

	<!-- 2. Bean으로 생성하는 방법 - Setter(Property) -->
	<bean name="cat2" class="com.multi.mvc.model.vo.Cat">
<!--		<constructor-arg name="name" value="도라에몽" />-->
<!--		<constructor-arg name="age" value="12" />-->
		<property name="name" value="나비" />
		<property name="age" value="4" />
	</bean>

	<!-- 3. Bean으로 생성하는 방법 - 생성자(c) 단축 표현 ★★★★★ -->
	<bean id="cat3" class="com.multi.mvc.model.vo.Cat" c:_0="야옹이" c:_1="7"/>
	<bean id="cat4" class="com.multi.mvc.model.vo.Cat" c:name="야옹이2" c:age="6"/>

	<!-- 4. Bean으로 생성하는 방법 - Setter(p) 단축 표현 ★★★★★ -->
	<bean id="dog1" class="com.multi.mvc.model.vo.Dog" p:name="멍멍이" p:age="2"/>
	<bean id="dog2" class="com.multi.mvc.model.vo.Dog" p:name="누렁이" p:age="3"/>

</beans>
