<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.multi.aop" />
	
	<!-- AOP 설정 하는 방법 -->
	<!-- 1. 모두 XML을 통하여 AOP 정의 및 Joinpoint를 정의하는 방법 (권장X) -->
	<!-- 2. 어노테이션으로 AOP를 설정하는 방법, 필수적인 XML은 반드시 정의해야 한다. ★★★★★  -->
	
	<!-- XML로 AOP를 설정하는 방법 예시 -->
	<!-- 
	<aop:config>
		<aop:aspect ref="xxxxxAspect">  AOP의 클래스
			Point cut : 호출되는 시점을 정의
			<aop:pointcut expression="execution(* com.multi.aop.service.MemberService.*(..))" id="memberServicePointCut"/> 
			expression : 호출시킬 메소드의 형식을 정의, ※고유 문법 존재!!
			id  :aspect의 고유 명칭, 메소드 명칭과 일치 필요!!
	
			before : 함수가 실행되기 이전에 호출
			<aop:before method="memberServicePointCutBefore" pointcut-ref="memberServicePointCut"/>

			after : 함수가 호출 된 이후
			<aop:after method="memberServicePointCutAfter" pointcut="com.multi.aop.service.MemberService.login(..)"/>
			
			after-returning : 함수가 호출 된 이후, 리턴값이 반환되기 이전
			<aop:after-returning method="memberServicePointCutAfterReturn" pointcut="com.multi.aop.service.MemberService.login(..)"/>
			
			after-throwing : 함수가 호출 되고, 에러가 발생한 경우
			<aop:after-throwing method="memberServicePointCutAfterError" pointcut="com.multi.aop.service.MemberService.login(..)"/>
			
			around : 함수가 호출되기 전후
			<aop:around method="memberServicePointCutAround" pointcut="com.multi.aop.service.MemberService.login(..)"/>
		</aop:aspect>
	</aop:config>
	
	Bean 객체가 있어야함 
	<beans:bean id="basicAspect" class="com.multi.aop.aspect.BasicAspect"/> 
	 -->
	
	<!-- 2) 어노테이션을 통한 AOP클래스 및 메소드 지정하는 방법 -->
	<!-- aspectj를 통해 Class 파일에서 AOP 어노테이션을 자동으로 스캔해오는 프록시 생성 -->
	<aop:aspectj-autoproxy/>

	<!-- AOP 재스캐닝을 통해 어노테이션으로 선언된 AOP를 실제 링킹하는 코드 -->	
	<context:component-scan base-package="com.multi.aop.*" />
	
</beans:beans>













